数据结构：
1，数组(Array)：索引和值
	
2，栈( Stack)
	1，先进先出LIFO
	2，操作：栈顶是否为空；栈元素个数；清空栈
	3，数组来实现栈
3，队列(Queue)
	1，先进先出FIFI
	2，操作：入列；出列；查看队列头；队列是否为空；队列长度
	3，
4，链表( Linked List)
	1，item和next；链表头，链表尾；
	2，


5，树( Tree)
	根节点，内部节点，叶子节点

	二叉树：
		每个结点最多有两颗子树
		左子树和右子树是有顺序的
		一个结点如果只有一颗子树，也要区分左右
	二叉搜索树：
		存储的数据，左节点比父节点小
		存储的数据，右节点比父节点大或者等于
	二叉搜索平衡树：
		第一点，满足二分搜索树所有性质；
		第二点，带有平衡条件：每个结点的左右子树的高度之差的绝对值（平衡因子）最多为1。

	AVL树（Adelson-Velskii and Landis）：是一种自平衡二叉搜索树

	红黑树：（Red Black Tree） 是一种自平衡二叉查找树
		
	二叉堆：堆(Heap)

	字典树：trie

6，图(Graph)

7，哈希表(Hash)

8，集合（set）：基于哈希表
	1，无重复性
9，字典（dictionary）：基于哈希表
	1，键值对
